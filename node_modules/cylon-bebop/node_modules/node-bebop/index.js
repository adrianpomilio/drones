var net = require("net");
var dgram = require('dgram');

var ARCOMMANDS_ID_PROJECT_COMMON = 0,
    ARCOMMANDS_ID_PROJECT_ARDRONE3 = 1,

    ARCOMMANDS_ID_ARDRONE3_CLASS_PILOTING = 0,
    ARCOMMANDS_ID_COMMON_CLASS_COMMON = 4,

    ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_FLATTRIM = 0,                                                
    ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_TAKEOFF = 1,
    ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_PCMD = 2,
    ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_LANDING = 3,
    ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_EMERGENCY = 4,
    ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_NAVIGATEHOME = 5,
    ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_AUTOTAKEOFFMODE = 6,
    ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_MAX = 7,

    ARCOMMANDS_ID_COMMON_COMMON_CMD_ALLSTATES = 0,

    ARNETWORKAL_FRAME_TYPE_DATA = 2,
    ARNETWORKAL_FRAME_TYPE_DATA_WITH_ACK = 4,

    BD_NET_CD_NONACK_ID = 10,
    BD_NET_CD_ACK_ID = 11,
    BD_NET_CD_EMERGENCY_ID = 12,
    BD_NET_CD_VIDEO_ACK_ID = 13,
    BD_NET_DC_NAVDATA_ID = 127,
    BD_NET_DC_EVENT_ID = 126,
    BD_NET_DC_VIDEO_DATA_ID = 125;

var gen = packetGenerator();
var bdCommand = generateAllStates();


function generateAllStates() {
  //
  // ARCOMMANDS_Generator_GenerateCommonCommonAllStates
  //

  var buf = new Buffer(4);

  buf.writeUInt8(ARCOMMANDS_ID_PROJECT_COMMON, 0)
  buf.writeUInt8(ARCOMMANDS_ID_COMMON_CLASS_COMMON, 1);
  buf.writeUInt16LE(ARCOMMANDS_ID_COMMON_COMMON_CMD_ALLSTATES, 2);

  return gen(buf);
}

function up(val) {
  return pcmd({gaz: val});
}

function down(val) {
  return pcmd({gaz: val * -1});
}

function forward(val) {
  return pcmd({pitch: val});
}

function backward(val) {
  return pcmd({pitch: val * -1});
}

function right(val) {
  return pcmd({roll: val});
}

function left(val) {
  return pcmd({roll: val * -1});
}

function clockwise(val) {
  return pcmd({yaw: val});
}

function counterClockwise(val) {
  return pcmd({yaw: val * -1});
}

function stop() {
  return pcmd();
}

function pcmd(options) {
  //
  // ARCOMMANDS_Generator_GenerateARDrone3PilotingPCMD
  //
  // uint8 - flag Boolean flag to activate roll/pitch movement
  // int8  - roll Roll consign for the drone [-100;100]
  // int8  - pitch Pitch consign for the drone [-100;100]
  // int8  - yaw Yaw consign for the drone [-100;100]
  // int8  - gaz Gaz consign for the drone [-100;100]
  // float - psi [NOT USED] - Magnetic north heading of the controlling device (deg) [-180;180]
  // 

  var buf = new Buffer(13);

  options = options || {};

  buf.writeUInt8(ARCOMMANDS_ID_PROJECT_ARDRONE3, 0)
  buf.writeUInt8(ARCOMMANDS_ID_ARDRONE3_CLASS_PILOTING, 1);
  buf.writeUInt16LE(ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_PCMD, 2);
  buf.writeUInt8(options.flag || 1, 4);
  buf.writeInt8(options.roll || 0, 5);
  buf.writeInt8(options.pitch || 0, 6);
  buf.writeInt8(options.yaw || 0, 7);
  buf.writeInt8(options.gaz || 0, 8);
  buf.writeFloatLE(options.psi || 0.0, 9);

  return gen(buf);
}

function takeOff() {
  //
  //  ARCOMMANDS_Generator_GenerateARDrone3PilotingTakeOff
  //

  var buf = new Buffer(4);

  buf.writeUInt8(ARCOMMANDS_ID_PROJECT_ARDRONE3, 0)
  buf.writeUInt8(ARCOMMANDS_ID_ARDRONE3_CLASS_PILOTING, 1);
  buf.writeUInt16LE(ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_TAKEOFF, 2);

  return gen(buf);
}

function land() {
  //
  // ARCOMMANDS_Generator_GenerateARDrone3PilotingLanding
  //

  var buf = new Buffer(4);

  buf.writeUInt8(ARCOMMANDS_ID_PROJECT_ARDRONE3, 0)
  buf.writeUInt8(ARCOMMANDS_ID_ARDRONE3_CLASS_PILOTING, 1);
  buf.writeUInt16LE(ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_LANDING, 2);

  return gen(buf);
}

function emergency() {
  //
  // ARCOMMANDS_Generator_GenerateARDrone3PilotingEmergency
  //

  var buf = new Buffer(4);

  buf.writeUInt8(ARCOMMANDS_ID_PROJECT_ARDRONE3, 0)
  buf.writeUInt8(ARCOMMANDS_ID_ARDRONE3_CLASS_PILOTING, 1);
  buf.writeUInt16LE(ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_EMERGENCY, 2);

  return gen(buf);
}

function packetGenerator() {
  //
  // ARNETWORKAL_Frame_t
  //
  // uint8  type  - frame type ARNETWORK_FRAME_TYPE
  // uint8  id    - identifier of the buffer sending the frame
  // uint8  seq   - sequence number of the frame
  // uint32 size  - size of the frame
  //

  var seq = 0x00;

  return function(cmd)  {
    var hlen = 7, // size of ARNETWORKAL_Frame_t header
        type = ARNETWORKAL_FRAME_TYPE_DATA,
        id = BD_NET_CD_ACK_ID,
        buf = new Buffer(hlen);

    seq++;

    if (seq > 255) {
      seq = 0;
    }

    buf.writeUInt8(type, 0);
    buf.writeUInt8(id, 1);
    buf.writeUInt8(seq, 2);
    buf.writeUInt32LE(cmd.length + hlen, 3);

    return Buffer.concat([buf, cmd]);
  };
}

//(function(){
//  setInterval(function() {
//    console.log(takeOff());
//  }, 100);
//})();

(function() {
  var HOST = "192.168.42.1",
      PORT = 44444;
  var client = new net.Socket();

  client.connect(PORT, HOST, function() {
      console.log('CONNECTED TO: ' + HOST + ':' + PORT);
      client.write(JSON.stringify({
        "controller_type":"computer", 
        "controller_name":"cylon", 
        "d2c_port":"43210"
      }));
  });

  client
    .on('close', function() {
      console.log('tcp Connection closed');
    })
    .on('data', function(data) {
      console.log('DATA: ' + data);
      client.destroy();
      (function() {
        var PORT = 43210;
        var server = dgram.createSocket('udp4');

        server.bind(PORT);
        server.on('listening', function () {
            var address = server.address();
            console.log('UDP Server listening on ' + address.address + ":" + address.port);
          })
          .on('message', function (message, remote) {
            console.log('udp', remote.address + ':' + remote.port +' - ', message.toJSON());
          })
          .on('error', function (val) {
            console.log('udp', val);
          });
      })();

      (function() {
        var PORT = 54321;
        var HOST = '192.168.42.1';
        var client = dgram.createSocket('udp4');

        client.on('error', function (val) {
            console.log('udp', val);
        });

        setInterval(function() {
          (function() {
            client.send(bdCommand, 0, bdCommand.length, PORT, HOST, function(err, bytes) {
                if (err) throw err;
                //console.log('UDP message sent to ' + HOST +':'+ PORT);
            });
          })();
        }, 25);

      })();
  });
})();

/*
(function() {
  setInterval(function() {
    console.log(bdCommand);
  }, 10);

  setTimeout(function() {
    bdCommand = takeOff();
  }, 2000);

  setTimeout(function() {
    bdCommand = counterClockwise(50);
  }, 5000);

  setTimeout(function() {
    bdCommand = clockwise(50);
  }, 7000);

  setTimeout(function() {
    bdCommand = counterClockwise(50);
  }, 9000);

  setTimeout(function() {
    bdCommand = land(); 
  }, 11000);
})();

process.on("SIGINT", function() {
  bdCommand = land();
  setTimeout(function() {
    process.kill(process.pid);
  }, 1000);
});
*/
